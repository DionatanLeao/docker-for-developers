https://github.com/matheusbattisti/curso_docker
docker run docker/whalesay cowsay hello_world

O que são containers?
- Um pacote de código que pode executar uma ação, por exemplo: rodar uma aplicação de Node.js, PHP, Python e etc;
- Ou seja, os nossos projetos serão executados dentro dos containers que criamos/utilizamos;
- Containers utilizam imagens para poderem ser executados;
- Múltiplos containers podem rodar juntos, exemplo: um para PHP e outro para MySQL;

Container X Imagem
- Imagem e Container são recursos fundamentais do Docker;
- Imagem é o "projeto" que será executado pelo container, todas as instruções estarão declaradas nela;
- Container é o Docker rodando alguma imagem, consequentemente executando algum código proposto por ela;
- O fluxo é: programamos uma imagem e a executamos por meio de um container;

Onde encotrar imagens?
- Vamos encontrar imagens no repositório do Docker: https://hub.docker.com
- Neste site podemos verificar quais as imagens existem da tecnologia que estamos procurando, por exemplo: Node.js;
- E também aprender a como utilizá-las;
- Vamos executar uma imagem em um container com o comando: docker run <imagem>

Verificar containers executados
- O comando docker ps ou docker container ps exibe quais containers estão sendo executados no momento;
- Utilizando a flag -a, temos também todos os containers já executados na máquina;
- Este comando é útil para entender o que está sendo executado e acontece no nosso ambiente;

Executando container com interação
- Podemos rodar um container e deixá-lo executando no terminal;
- Vamos utilizar a flag it;
- Desta maneira podemos executar comandos disponíveis no container que estamos utilizando o comando run;
- Podemos utilizar a imagem do ubuntu para isso!

Container X VM(Virtual Machine)
- Container é uma aplicação que server para um determinado fim, não possui sistema operacional, seu tamanho é de alguns mbs;
- VM possui sistema operacional próprio, tamanho de gbs, pode executar diversas funções ao mesmo tempo;
- Containers acabam gastando menos recursos para serem executados, por causa do seu uso específico;
- VM gastam mais recursos, porém podem exercer mais funções;

Executar container em background 
- Quando iniciamos um container que persiste, ele fica ocupando o terminal;
- Podemos executar um container em background, para não precisar ficar com diversas abas de terminal aberto, utilizamos a flag -d (detached);
- Verificamos containers em background com docker ps também;
- Podemos utilizar o nginx para este exemplo;

Expor portas
- Os containers do docker não tem conexão com nada de fora deles;
- Por isso precisamos expor as portas, a flag é a -p e podemos fazer assim: -p 80:80;
- Desta maneira o container estará acessível na porta 80;
- Podemos testar este exemplo com o nginx;

Parando containers
- Podemos parar um container com o comando docker stop <id ou nome>;
- Desta maneira estaremos liberando recursos que estão sendo gastos pelo mesmo;
- Podemos verificar os containers rodando com o comando docker ps;

Iniciando um container
- Aprendemos já a parar um container com o stop, para voltar a rodar um container podemos usar o comando docker start <id>;
- Lembre-se que o run sempre cria um novo container;
- Então caso seja necessário aproveitar um antigo, opte pelo start;

Definindo nome do container
- Podemos definir um nome do container com a flag --name;
- Se não colocamos, recebemos um nome aleatório, o que pode ser um problema para uma  aplicação profissional;
- A flag run é inserida junto do comando run;

Verificando os logs
- Podemos verificar o que aconteceu em um container com o comando logs;
- Utilizamos da seguinte maneira: docker logs <id>
- As últimas ações realizadas no container, serão exibidas no terminal;

Removendo containers
- Podemos remover um container da máquina que estamos executando o Docker;
- O comando é docker -rm <id>;
- Se o container estiver rodando ainda, podemos utilizar a flag -f (force);
- O container removido não é mais listado em docker ps -a;

O que são imagens?
- Imagens são originadas de arquivos que programamos para que o Docker crie uma estrutura que execute determinadas ações em containers;
- Elas contém informações como: imagens base, diretório base, comandos a serem executados, porta da aplicação e etc;
- Ao rodar um container baseado na imagem, as instruções serão executadas em camadas;

Como escolher uma boa imagem
- Podemos fazer download das imagens em: https://hub.docker.com;
- Porém qualquer um pode fazer upload de uma imagem, isso é um problema;
- Devemos então nos atentar as imagens oficiais;
- Outro parâmetro interessante é a quantidade de downloads e a quantidade de stars;

Criando uma imagem
- Para criar uma imagem vamos precisar de um arquivo Dockerfile em uma pasta que ficará o projeto;
- Este arquivo vai precisar de algumas instruções para poder ser executado:
    - FROM: imagem base;
    - WORKDIR: diretório da aplicação;
    - EXPOSE: porta da aplicação;
    - COPY: quais arquivos precisam ser copiados;

Executando uma imagem
- Para executar a imagem primeiramente vamos precisar fazer o build;
- O comando é docker build <diretório da imagem>;
- Depois vamos utilizar o docker run <imagem> para executá-la;

Alterando uma imagem
- Sempre que alteramos o código de uma imagem vamos precisar fazer o build novamente;
- Para o Docker é como se fosse uma imagem completamente nova;
- Após fazer o build vamos executá-la por o outro id único criada com o docker run;